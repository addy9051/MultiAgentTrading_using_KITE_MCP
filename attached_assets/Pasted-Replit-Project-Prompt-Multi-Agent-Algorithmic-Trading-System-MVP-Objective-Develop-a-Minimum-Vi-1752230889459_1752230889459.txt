Replit Project Prompt: Multi-Agent Algorithmic Trading System (MVP)

Objective:
Develop a Minimum Viable Product (MVP) of a multi-agent algorithmic trading system. The system will leverage the Kite Connect 3 API for market data and order execution, and specifically integrate with the Kite MCP server for secure and efficient interaction with Zerodha accounts. The architectural inspiration for the multi-agent design should be drawn from the concepts presented in the TauricResearch/TradingAgents GitHub repository.

Key Requirements for MVP:

Core Architecture (Closely Inspired by TauricResearch/TradingAgents):

Implement a basic multi-agent framework, closely following the design principles and agent interaction patterns demonstrated in the TauricResearch/TradingAgents GitHub repository.

Crucially, the agents within this system MUST be built using the Python-based Langchain and Langgraph frameworks. This will ensure a robust and scalable foundation for agent development, mirroring the advanced capabilities seen in the reference repository.

Focus on a clear separation of concerns:

Data Handler/Market Connector: Responsible for connecting to Kite Connect via Kite MCP, fetching market data (e.g., quotes, historical data), and managing the API session.

Agent(s): At least one simple trading agent that can receive market data, make basic trading decisions, and send orders. These agents will be implemented using Langchain and Langgraph.

Order Management/Execution: A component responsible for sending orders to Kite Connect and handling order status updates.

Kite Connect 3 API Integration:

Utilize the official Kite Connect 3 API for all trading functionalities.

Documentation Reference: Please refer to the official documentation for implementation details: https://kite.trade/docs/connect/v3/

Kite MCP Server Integration:

Crucially, the system MUST interact with Kite Connect 3 through the provided Kite MCP server. This is essential for handling authentication and API calls securely.

Kite MCP Blog Post: Understand the purpose and functionality of Kite MCP from this blog post: https://zerodha.com/z-connect/featured/connect-your-zerodha-account-to-ai-assistants-with-kite-mcp

Kite MCP GitHub Repository: Refer to the server's repository for setup and interaction details: https://github.com/zerodha/kite-mcp-server

The MVP should demonstrate how to configure and connect to a running Kite MCP server instance.

MVP Functionalities:

Authentication Flow: Implement the initial authentication flow with Kite Connect via Kite MCP. This includes obtaining a request token, generating a session, and maintaining the session. (Assume the Kite MCP server is already running and accessible).

Market Data Fetching:

Ability to fetch live quotes for a pre-defined instrument (e.g., a specific stock or index).

Ability to fetch basic historical data (e.g., last 'X' candles for a given instrument).

Simple Agent Logic (using Langchain/Langgraph):

Implement one very basic trading agent using Langchain and Langgraph. This agent should:

Receive live market data updates.

Execute a simple, pre-defined, non-complex strategy (e.g., "If LTP of XYZ stock crosses 100, print a 'buy' signal; if it drops below 95, print a 'sell' signal"). No actual order placement for this initial MVP. The focus is on data flow and agent decision-making within the Langchain/Langgraph framework.

Order Simulation (Optional but Recommended for future): For the MVP, actual order placement is not required. Instead, the agent should log its intended actions (e.g., "Agent X decided to BUY 10 shares of RELIANCE").

Technical Considerations & Assumptions:

Language: Python is the mandatory language for the entire project, especially for the agent implementations using Langchain and Langgraph.

Environment: The project should be runnable within a standard Replit environment.

Configuration: Provide clear instructions on how to set up API keys, secrets, and the Kite MCP server URL (as environment variables or a config file).

Error Handling: Basic error handling for API calls and network issues.

Logging: Implement basic logging to track agent decisions, market data, and API interactions.

Deliverables for MVP:

A Python project structure on Replit.

Code demonstrating:

Connection and authentication with Kite Connect 3 via Kite MCP.

Fetching live quotes and historical data.

A basic trading agent implemented with Langchain and Langgraph that processes market data and logs simulated trading decisions.

A README.md file explaining:

How to set up and run the project.

Assumed environment variables (e.g., KITE_API_KEY, KITE_API_SECRET, KITE_MCP_URL).

How to interact with the system (e.g., how to trigger data fetching).

Out of Scope for MVP (Future Enhancements):

Complex trading strategies beyond the basic example.

Multiple, interacting agents with sophisticated communication (beyond basic Langgraph flow).

Persistent storage for trading history or agent state.

Advanced UI/dashboard.

Robust risk management or position sizing.

Actual live order placement (unless explicitly requested for a later stage).